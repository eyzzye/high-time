//
// stageN_N
//
struct stageN_N_static_data {
    bn::fixed_point enemy_pos_000 = { -24,224 };		// 0
    bn::fixed_point enemy_pos_001 = { 24,224 };		// 1
    bn::fixed_point enemy_pos_002 = { 24,-64 };		// 2
    bn::fixed_point enemy_pos_003 = { -24,-64 };		// 3

    #define STN_N_TERRAIN_INIT_LIST_SIZE (4)
    struct terrain_init_data_t terrain_init_data[STN_N_TERRAIN_INIT_LIST_SIZE] = {
        {bn::fixed_rect(0.0,-240.0,512.0,32.0)},
        {bn::fixed_rect(-240.0,16.0,32.0,480.0)},
        {bn::fixed_rect(240.0,40.0,32.0,432.0)},
        {bn::fixed_rect(16.0,240.0,480.0,32.0)},
    };
    struct ht::array_t<struct terrain_init_data_t> terrain_init_list = {
        STN_N_TERRAIN_INIT_LIST_SIZE,
        terrain_init_data
    };

    #define STN_N_BG_MAP_LIST_SIZE (12)
    struct ht::bg_map_manager::init_data_t bg_map_init_data[STN_N_BG_MAP_LIST_SIZE] = {
        { 32,8,DOWN_STAIRS_TILE1 },
        { 33,8,DOWN_STAIRS_TILE2 },
        { 32,9,DOWN_STAIRS_TILE3 },
        { 33,9,DOWN_STAIRS_TILE4 },
        { 50,46,RIGHT_GATE_CLOSE_TILE1 },
        { 51,46,RIGHT_GATE_CLOSE_TILE2 },
        { 50,47,RIGHT_GATE_CLOSE_TILE3 },
        { 51,47,RIGHT_GATE_CLOSE_TILE4 },
        { 50,48,RIGHT_GATE_CLOSE_TILE5 },
        { 51,48,RIGHT_GATE_CLOSE_TILE6 },
        { 50,49,RIGHT_GATE_CLOSE_TILE7 },
        { 51,49,RIGHT_GATE_CLOSE_TILE8 },
    };
    struct ht::array_t<struct ht::bg_map_manager::init_data_t> bg_map_init_list = {
        STN_N_BG_MAP_LIST_SIZE,
        bg_map_init_data
    };

    #define STN_N_STAIRS_LIST_SIZE (1)
    struct ht::stairs_init_data_t stairs_init_data[STN_N_STAIRS_LIST_SIZE] = {
        {bn::fixed_point(8,-184),0,bn::fixed_point(-8,-184)},
    }; 
    struct ht::array_t<struct ht::stairs_init_data_t> stairs_init_list = {
        STN_N_STAIRS_LIST_SIZE,
        stairs_init_data
    };

    #define STN_N_TELEPORT_LIST_SIZE (1)
    struct ht::teleport_init_data_t teleport_init_data[STN_N_TELEPORT_LIST_SIZE] = {
        {bn::fixed_rect(240.0,-200.0,32.0,48.0),2,bn::fixed_point(-232,-200)},
    };
    struct ht::array_t<struct ht::teleport_init_data_t> teleport_init_list = {
        STN_N_TELEPORT_LIST_SIZE,
        teleport_init_data
    };

    #define STN_N_GATE_LIST_SIZE (1)
    struct ht::gate_init_data_t gate_init_data[STN_N_GATE_LIST_SIZE] = {
        {bn::fixed_rect(152,128,16,32),ht::directions::RIGHT},
    };
    struct array_t<struct ht::gate_init_data_t> gate_init_list = {
        STN_N_GATE_LIST_SIZE,
        gate_init_data
    };

    #define STN_N_ITEM_KEY_LIST_SIZE (1)
    struct ht::item_key_init_data_t item_key_init_data[STN_N_ITEM_KEY_LIST_SIZE] = {
        {bn::fixed_rect(56,-56,16,16)},
    };
    struct ht::array_t<struct ht::item_key_init_data_t> item_key_init_list = {
        STN_N_ITEM_KEY_LIST_SIZE,
        item_key_init_data
    };

    #define STN_N_TRACE_AREA_INIT_LIST_SIZE (4)
    struct trace_manager::area_init_data_t area_init_data[STN_N_TRACE_AREA_INIT_LIST_SIZE] = {
        {bn::fixed_rect(40.0,-184.0,176.0,80.0)}, 	// 0
        {bn::fixed_rect(-56.0,-208.0,16.0,32.0)}, 	// 1
        {bn::fixed_rect(-88.0,0.0,48.0,448.0)}, 	// 2
        {bn::fixed_rect(32.0,-104.0,192.0,48.0)}, 	// 3
    };
    struct ht::array_t<struct trace_manager::area_init_data_t> area_init_list = {
        STN_N_TRACE_AREA_INIT_LIST_SIZE,
        area_init_data
    };

    #define STN_N_TRACE_CNN_INIT_LIST_SIZE (3)
    struct trace_manager::connection_init_data_t connection_init_data[STN_N_TRACE_CNN_INIT_LIST_SIZE] = {
        {1,0,bn::fixed_point(-56.0,-208),bn::fixed_point(-40.0,-208)}, 	//1
        {2,1,bn::fixed_point(-72.0,-208),bn::fixed_point(-56.0,-208)}, 	//2
        {2,3,bn::fixed_point(-72.0,-112),bn::fixed_point(-56.0,-112)}, 	//3
    };
    struct array_t<struct trace_manager::connection_init_data_t> connection_init_list = {
        STN_N_TRACE_CNN_INIT_LIST_SIZE,
        connection_init_data
    };

    #define STN_N_AI_LIST_NUM (1)
    #define STN_N_AI_001_LIST_SIZE (8)
    struct ht::ai_scenario_t ai_001_list[STN_N_AI_001_LIST_SIZE] = {
        {ht::ai_action_type::MOVE_TO, (void*)&enemy_pos_000},
        {ht::ai_action_type::WAIT,    (void*)&wait_time},
        {ht::ai_action_type::MOVE_TO, (void*)&enemy_pos_001},
        {ht::ai_action_type::WAIT,    (void*)&wait_time},
        {ht::ai_action_type::MOVE_TO, (void*)&enemy_pos_002},
        {ht::ai_action_type::WAIT,    (void*)&wait_time},
        {ht::ai_action_type::MOVE_TO, (void*)&enemy_pos_003},
        {ht::ai_action_type::WAIT,    (void*)&wait_time},
    };
};

BN_DATA_EWRAM stageN_N_static_data stageN_N_data;

static bool get_stageN_N_enable(int type, int id) {
    switch (type) {
    case ((int)ht::object::type::HERO):
        return false;
        break;
    case ((int)ht::object::type::ENEMY):
        return true;
        break;
    case ((int)ht::object::type::ITEM):
        if (id == (int)ht::object::item_id::ITEM_KEY) return true;
        break;
    case ((int)ht::object::type::EVENT):
        if (id == (int)ht::object::event_id::GOAL) return false;
        if (id == (int)ht::object::event_id::STAIRS) return false;
        if (id == (int)ht::object::event_id::TELEPORT) return false;
        if (id == (int)ht::object::event_id::GATE) return false;
        break;
    default:
        break;
    }
    return false;
}

void stageN::_stageN_N_create_enemy() {
    for (int list_idx = 0; list_idx < STN_N_AI_LIST_NUM; list_idx++) {
        bn::fixed_point current_pos(0,0);
        struct ht::ai_scenario_t* current_ai = NULL;
        int current_ai_size = 0;
        ht::enemy::enemy_id e_id = ht::enemy::enemy_id::SECURITY_GUARD;
        ht::enemy::grade grade = ht::enemy::grade::HARD;

        if (list_idx == 0) {
            current_pos = stageN_N_data.enemy_pos_000;
            current_ai = stageN_N_data.ai_001_list;
            current_ai_size = STN_N_AI_001_LIST_SIZE;
            grade = ht::enemy::grade::INSANE;
        }

        if(e_id == ht::enemy::enemy_id::SECURITY_GUARD) {
            _e_security_guard.emplace_back(grade, current_pos, current_ai, current_ai_size);
            auto sg = _e_security_guard.end() - 1;
            _enemy_list.push_back(sg);
        }
        else if(e_id == ht::enemy::enemy_id::DOG) {
            _e_dog.emplace_back(grade, current_pos, current_ai, current_ai_size);
            auto dog = _e_dog.end() - 1;
            _enemy_list.push_back(dog);
        }
        else if(e_id == ht::enemy::enemy_id::CHASER) {
            _e_chaser.emplace_back(grade, current_pos, current_ai, current_ai_size);
            auto chaser = _e_chaser.end() - 1;
            _enemy_list.push_back(chaser);
        }
        else if(e_id == ht::enemy::enemy_id::ASSASSIN) {
            _e_assassin.emplace_back(grade, current_pos, current_ai, current_ai_size);
            auto assassin = _e_assassin.end() - 1;
            _enemy_list.push_back(assassin);
        }
    }
}

